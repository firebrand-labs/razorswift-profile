/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {JdAndTaggedCandidateDtoApiResponse} from '../model/JdAndTaggedCandidateDtoApiResponse';
import {JdAndTaggedCandidateDtoIEnumerableApiResponse} from '../model/JdAndTaggedCandidateDtoIEnumerableApiResponse';
import {JdAndTaggedCandidateStatusType} from '../model/JdAndTaggedCandidateStatusType';
import {TaggedCandidates} from '../model/TaggedCandidates';

/**
* JdAndTaggedCandidate service.
* @module api/JdAndTaggedCandidateApi
* @version v3.76(UAT)
*/
export class JdAndTaggedCandidateApi {

    /**
    * Constructs a new JdAndTaggedCandidateApi. 
    * @alias module:api/JdAndTaggedCandidateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiJdAndTaggedCandidateGetAllCandidatesByJobDescriptionIdJobDescriptionIdGet operation.
     * @callback moduleapi/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateGetAllCandidatesByJobDescriptionIdJobDescriptionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdAndTaggedCandidateDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} jobDescriptionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/JdAndTaggedCandidateStatusType} opts.status   1 &#x3D; YetToRespond  2 &#x3D; Interested  3 &#x3D; Rejected  4 &#x3D; Cancelled  5 &#x3D; JdDeactivated  6 &#x3D; Completed  7 &#x3D; Fail
     * @param {module:api/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateGetAllCandidatesByJobDescriptionIdJobDescriptionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdAndTaggedCandidateGetAllCandidatesByJobDescriptionIdJobDescriptionIdGet(jobDescriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobDescriptionId' is set
      if (jobDescriptionId === undefined || jobDescriptionId === null) {
        throw new Error("Missing the required parameter 'jobDescriptionId' when calling apiJdAndTaggedCandidateGetAllCandidatesByJobDescriptionIdJobDescriptionIdGet");
      }

      let pathParams = {
        'JobDescriptionId': jobDescriptionId
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdAndTaggedCandidateDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/JdAndTaggedCandidate/GetAllCandidatesByJobDescriptionId/{JobDescriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdAndTaggedCandidateGetAllJdByCandidateIdCandidateIdStatusGet operation.
     * @callback moduleapi/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateGetAllJdByCandidateIdCandidateIdStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdAndTaggedCandidateDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:model/JdAndTaggedCandidateStatusType} status   1 &#x3D; YetToRespond  2 &#x3D; Interested  3 &#x3D; Rejected  4 &#x3D; Cancelled  5 &#x3D; JdDeactivated  6 &#x3D; Completed  7 &#x3D; Fail
     * @param {module:api/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateGetAllJdByCandidateIdCandidateIdStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdAndTaggedCandidateGetAllJdByCandidateIdCandidateIdStatusGet(candidateId, status, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiJdAndTaggedCandidateGetAllJdByCandidateIdCandidateIdStatusGet");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling apiJdAndTaggedCandidateGetAllJdByCandidateIdCandidateIdStatusGet");
      }

      let pathParams = {
        'candidateId': candidateId,'status': status
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdAndTaggedCandidateDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/JdAndTaggedCandidate/GetAllJdByCandidateId/{candidateId}/{status}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdAndTaggedCandidateGetByGuidGuidGet operation.
     * @callback moduleapi/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateGetByGuidGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdAndTaggedCandidateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} guid 
     * @param {module:api/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateGetByGuidGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdAndTaggedCandidateGetByGuidGuidGet(guid, callback) {
      
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiJdAndTaggedCandidateGetByGuidGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdAndTaggedCandidateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdAndTaggedCandidate/GetByGuid/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdAndTaggedCandidateIdGet operation.
     * @callback moduleapi/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdAndTaggedCandidateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdAndTaggedCandidateIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJdAndTaggedCandidateIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdAndTaggedCandidateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdAndTaggedCandidate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdAndTaggedCandidatePost operation.
     * @callback moduleapi/JdAndTaggedCandidateApi~apiJdAndTaggedCandidatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdAndTaggedCandidateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/TaggedCandidates} opts.body 
     * @param {module:api/JdAndTaggedCandidateApi~apiJdAndTaggedCandidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdAndTaggedCandidatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdAndTaggedCandidateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdAndTaggedCandidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdAndTaggedCandidateUnTagByJdIdAndCandidateIdJobDescriptionIdCandidateIdPost operation.
     * @callback moduleapi/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateUnTagByJdIdAndCandidateIdJobDescriptionIdCandidateIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdAndTaggedCandidateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} jobDescriptionId 
     * @param {Number} candidateId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.remarks 
     * @param {module:api/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateUnTagByJdIdAndCandidateIdJobDescriptionIdCandidateIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdAndTaggedCandidateUnTagByJdIdAndCandidateIdJobDescriptionIdCandidateIdPost(jobDescriptionId, candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobDescriptionId' is set
      if (jobDescriptionId === undefined || jobDescriptionId === null) {
        throw new Error("Missing the required parameter 'jobDescriptionId' when calling apiJdAndTaggedCandidateUnTagByJdIdAndCandidateIdJobDescriptionIdCandidateIdPost");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiJdAndTaggedCandidateUnTagByJdIdAndCandidateIdJobDescriptionIdCandidateIdPost");
      }

      let pathParams = {
        'jobDescriptionId': jobDescriptionId,'candidateId': candidateId
      };
      let queryParams = {
        'remarks': opts['remarks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdAndTaggedCandidateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdAndTaggedCandidate/UnTagByJdIdAndCandidateId/{jobDescriptionId}/{candidateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdAndTaggedCandidateUpdateCandidateAcceptedStatusIdClientIdPost operation.
     * @callback moduleapi/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateUpdateCandidateAcceptedStatusIdClientIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdAndTaggedCandidateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Number} clientId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isSelfResponded 
     * @param {module:api/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateUpdateCandidateAcceptedStatusIdClientIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdAndTaggedCandidateUpdateCandidateAcceptedStatusIdClientIdPost(id, clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJdAndTaggedCandidateUpdateCandidateAcceptedStatusIdClientIdPost");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiJdAndTaggedCandidateUpdateCandidateAcceptedStatusIdClientIdPost");
      }

      let pathParams = {
        'id': id,'clientId': clientId
      };
      let queryParams = {
        'isSelfResponded': opts['isSelfResponded']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdAndTaggedCandidateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdAndTaggedCandidate/UpdateCandidateAcceptedStatus/{id}/{clientId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdAndTaggedCandidateUpdateCandidateRejectedStatusIdPost operation.
     * @callback moduleapi/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateUpdateCandidateRejectedStatusIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdAndTaggedCandidateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isSelfResponded 
     * @param {String} opts.remarks 
     * @param {module:api/JdAndTaggedCandidateApi~apiJdAndTaggedCandidateUpdateCandidateRejectedStatusIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdAndTaggedCandidateUpdateCandidateRejectedStatusIdPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJdAndTaggedCandidateUpdateCandidateRejectedStatusIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isSelfResponded': opts['isSelfResponded'],'remarks': opts['remarks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdAndTaggedCandidateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdAndTaggedCandidate/UpdateCandidateRejectedStatus/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}