/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {JdInterviewRoundsCompactDtoApiResponse} from '../model/JdInterviewRoundsCompactDtoApiResponse';
import {JdInterviewRoundsCompactDtoIEnumerableApiResponse} from '../model/JdInterviewRoundsCompactDtoIEnumerableApiResponse';
import {JdInterviewRoundsCreateDto} from '../model/JdInterviewRoundsCreateDto';
import {JdInterviewRoundsDtoApiResponse} from '../model/JdInterviewRoundsDtoApiResponse';
import {JdInterviewRoundsEditDto} from '../model/JdInterviewRoundsEditDto';

/**
* JdInterviewRound service.
* @module api/JdInterviewRoundApi
* @version v3.76(UAT)
*/
export class JdInterviewRoundApi {

    /**
    * Constructs a new JdInterviewRoundApi. 
    * @alias module:api/JdInterviewRoundApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiJdInterviewRoundGet operation.
     * @callback moduleapi/JdInterviewRoundApi~apiJdInterviewRoundGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsCompactDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/JdInterviewRoundApi~apiJdInterviewRoundGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsCompactDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRound', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdInterviewRoundGetInterviewPanelByJobDescriptionIdJobDescriptionIdGet operation.
     * @callback moduleapi/JdInterviewRoundApi~apiJdInterviewRoundGetInterviewPanelByJobDescriptionIdJobDescriptionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsCompactDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} jobDescriptionId 
     * @param {module:api/JdInterviewRoundApi~apiJdInterviewRoundGetInterviewPanelByJobDescriptionIdJobDescriptionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundGetInterviewPanelByJobDescriptionIdJobDescriptionIdGet(jobDescriptionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobDescriptionId' is set
      if (jobDescriptionId === undefined || jobDescriptionId === null) {
        throw new Error("Missing the required parameter 'jobDescriptionId' when calling apiJdInterviewRoundGetInterviewPanelByJobDescriptionIdJobDescriptionIdGet");
      }

      let pathParams = {
        'JobDescriptionId': jobDescriptionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsCompactDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRound/GetInterviewPanelByJobDescriptionId/{JobDescriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdInterviewRoundIdDelete operation.
     * @callback moduleapi/JdInterviewRoundApi~apiJdInterviewRoundIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsCompactDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/JdInterviewRoundApi~apiJdInterviewRoundIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJdInterviewRoundIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsCompactDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRound/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdInterviewRoundPost operation.
     * @callback moduleapi/JdInterviewRoundApi~apiJdInterviewRoundPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/JdInterviewRoundsCreateDto} opts.body 
     * @param {module:api/JdInterviewRoundApi~apiJdInterviewRoundPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRound', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdInterviewRoundPut operation.
     * @callback moduleapi/JdInterviewRoundApi~apiJdInterviewRoundPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/JdInterviewRoundsEditDto} opts.body 
     * @param {module:api/JdInterviewRoundApi~apiJdInterviewRoundPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRound', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}