/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BooleanApiResponse} from '../model/BooleanApiResponse';
import {CandidateRegisterDto} from '../model/CandidateRegisterDto';
import {ClientLogInDto} from '../model/ClientLogInDto';
import {LogInDto} from '../model/LogInDto';
import {UserDto} from '../model/UserDto';
import {UserDtoApiResponse} from '../model/UserDtoApiResponse';
import {ValidateCandidateDto} from '../model/ValidateCandidateDto';

/**
* Account service.
* @module api/AccountApi
* @version v3.76(UAT)
*/
export class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiAccountCandidateLogInPost operation.
     * @callback moduleapi/AccountApi~apiAccountCandidateLogInPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/LogInDto} opts.body 
     * @param {module:api/AccountApi~apiAccountCandidateLogInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAccountCandidateLogInPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Account/CandidateLogIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAccountCheckCurrentPasswordGuidPasswordGet operation.
     * @callback moduleapi/AccountApi~apiAccountCheckCurrentPasswordGuidPasswordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BooleanApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} guid 
     * @param {String} password 
     * @param {module:api/AccountApi~apiAccountCheckCurrentPasswordGuidPasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAccountCheckCurrentPasswordGuidPasswordGet(guid, password, callback) {
      
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiAccountCheckCurrentPasswordGuidPasswordGet");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling apiAccountCheckCurrentPasswordGuidPasswordGet");
      }

      let pathParams = {
        'guid': guid,'password': password
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BooleanApiResponse;

      return this.apiClient.callApi(
        '/api/Account/CheckCurrentPassword/{guid}/{password}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAccountCheckTokenExpirationGet operation.
     * @callback moduleapi/AccountApi~apiAccountCheckTokenExpirationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BooleanApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:api/AccountApi~apiAccountCheckTokenExpirationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAccountCheckTokenExpirationGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'Token': opts['token']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BooleanApiResponse;

      return this.apiClient.callApi(
        '/api/Account/CheckTokenExpiration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAccountLogInPost operation.
     * @callback moduleapi/AccountApi~apiAccountLogInPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientLogInDto} opts.body 
     * @param {module:api/AccountApi~apiAccountLogInPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAccountLogInPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Account/LogIn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAccountLogOutPost operation.
     * @callback moduleapi/AccountApi~apiAccountLogOutPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDto} opts.body 
     * @param {module:api/AccountApi~apiAccountLogOutPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAccountLogOutPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Account/LogOut', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAccountRegisterCandidatePost operation.
     * @callback moduleapi/AccountApi~apiAccountRegisterCandidatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CandidateRegisterDto} opts.body 
     * @param {module:api/AccountApi~apiAccountRegisterCandidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAccountRegisterCandidatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Account/RegisterCandidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAccountResetPasswordGuidPasswordGet operation.
     * @callback moduleapi/AccountApi~apiAccountResetPasswordGuidPasswordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BooleanApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} guid 
     * @param {String} password 
     * @param {module:api/AccountApi~apiAccountResetPasswordGuidPasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAccountResetPasswordGuidPasswordGet(guid, password, callback) {
      
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiAccountResetPasswordGuidPasswordGet");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling apiAccountResetPasswordGuidPasswordGet");
      }

      let pathParams = {
        'guid': guid,'password': password
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = BooleanApiResponse;

      return this.apiClient.callApi(
        '/api/Account/ResetPassword/{guid}/{password}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAccountValidateCandidatePost operation.
     * @callback moduleapi/AccountApi~apiAccountValidateCandidatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ValidateCandidateDto} opts.body 
     * @param {module:api/AccountApi~apiAccountValidateCandidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAccountValidateCandidatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Account/ValidateCandidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}