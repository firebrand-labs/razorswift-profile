/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ClientDashboardDtoApiResponse} from '../model/ClientDashboardDtoApiResponse';
import {ClientDashboardDtoIEnumerableApiResponse} from '../model/ClientDashboardDtoIEnumerableApiResponse';

/**
* ClientDashboard service.
* @module api/ClientDashboardApi
* @version v3.76(UAT)
*/
export class ClientDashboardApi {

    /**
    * Constructs a new ClientDashboardApi. 
    * @alias module:api/ClientDashboardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiClientDashboardGetClientDashBoadrdHiringPipelineClientIdGet operation.
     * @callback moduleapi/ClientDashboardApi~apiClientDashboardGetClientDashBoadrdHiringPipelineClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientDashboardDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} clientId 
     * @param {module:api/ClientDashboardApi~apiClientDashboardGetClientDashBoadrdHiringPipelineClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientDashboardGetClientDashBoadrdHiringPipelineClientIdGet(clientId, callback) {
      
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiClientDashboardGetClientDashBoadrdHiringPipelineClientIdGet");
      }

      let pathParams = {
        'clientId': clientId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientDashboardDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/ClientDashboard/GetClientDashBoadrdHiringPipeline/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientDashboardGetClientDashboardAnalyticsClientIdGet operation.
     * @callback moduleapi/ClientDashboardApi~apiClientDashboardGetClientDashboardAnalyticsClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientDashboardDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} clientId 
     * @param {module:api/ClientDashboardApi~apiClientDashboardGetClientDashboardAnalyticsClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientDashboardGetClientDashboardAnalyticsClientIdGet(clientId, callback) {
      
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiClientDashboardGetClientDashboardAnalyticsClientIdGet");
      }

      let pathParams = {
        'clientId': clientId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientDashboardDtoApiResponse;

      return this.apiClient.callApi(
        '/api/ClientDashboard/GetClientDashboardAnalytics/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}