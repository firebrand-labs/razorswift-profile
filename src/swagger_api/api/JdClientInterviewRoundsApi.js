/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InterviewStatus} from '../model/InterviewStatus';
import {JdClientInterviewRoundsDtoApiResponse} from '../model/JdClientInterviewRoundsDtoApiResponse';
import {JdClientInterviewRoundsEditDto} from '../model/JdClientInterviewRoundsEditDto';

/**
* JdClientInterviewRounds service.
* @module api/JdClientInterviewRoundsApi
* @version v3.76(UAT)
*/
export class JdClientInterviewRoundsApi {

    /**
    * Constructs a new JdClientInterviewRoundsApi. 
    * @alias module:api/JdClientInterviewRoundsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiJdClientInterviewRoundsPut operation.
     * @callback moduleapi/JdClientInterviewRoundsApi~apiJdClientInterviewRoundsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewRoundsDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/JdClientInterviewRoundsEditDto} opts.body 
     * @param {module:api/JdClientInterviewRoundsApi~apiJdClientInterviewRoundsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewRoundsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewRoundsDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterviewRounds', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewRoundsUpdateInterviewFailedStatusRoundIdCandidateStatusIdPost operation.
     * @callback moduleapi/JdClientInterviewRoundsApi~apiJdClientInterviewRoundsUpdateInterviewFailedStatusRoundIdCandidateStatusIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewRoundsDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} roundId 
     * @param {Number} candidateStatusId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InterviewStatus} opts.interviewStatus   1 &#x3D; Pass  2 &#x3D; Fail
     * @param {String} opts.remarks 
     * @param {module:api/JdClientInterviewRoundsApi~apiJdClientInterviewRoundsUpdateInterviewFailedStatusRoundIdCandidateStatusIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewRoundsUpdateInterviewFailedStatusRoundIdCandidateStatusIdPost(roundId, candidateStatusId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roundId' is set
      if (roundId === undefined || roundId === null) {
        throw new Error("Missing the required parameter 'roundId' when calling apiJdClientInterviewRoundsUpdateInterviewFailedStatusRoundIdCandidateStatusIdPost");
      }
      // verify the required parameter 'candidateStatusId' is set
      if (candidateStatusId === undefined || candidateStatusId === null) {
        throw new Error("Missing the required parameter 'candidateStatusId' when calling apiJdClientInterviewRoundsUpdateInterviewFailedStatusRoundIdCandidateStatusIdPost");
      }

      let pathParams = {
        'roundId': roundId,'candidateStatusId': candidateStatusId
      };
      let queryParams = {
        'interviewStatus': opts['interviewStatus'],'remarks': opts['remarks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewRoundsDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterviewRounds/UpdateInterviewFailedStatus/{roundId}/{candidateStatusId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewRoundsUpdateInterviewPassStatusRoundIdPost operation.
     * @callback moduleapi/JdClientInterviewRoundsApi~apiJdClientInterviewRoundsUpdateInterviewPassStatusRoundIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewRoundsDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} roundId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.remarks 
     * @param {module:api/JdClientInterviewRoundsApi~apiJdClientInterviewRoundsUpdateInterviewPassStatusRoundIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewRoundsUpdateInterviewPassStatusRoundIdPost(roundId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roundId' is set
      if (roundId === undefined || roundId === null) {
        throw new Error("Missing the required parameter 'roundId' when calling apiJdClientInterviewRoundsUpdateInterviewPassStatusRoundIdPost");
      }

      let pathParams = {
        'roundId': roundId
      };
      let queryParams = {
        'remarks': opts['remarks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewRoundsDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterviewRounds/UpdateInterviewPassStatus/{roundId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}