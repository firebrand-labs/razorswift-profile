/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AssessmentCompactDtoApiResponse} from '../model/AssessmentCompactDtoApiResponse';
import {AssessmentCompactDtoIEnumerableApiResponse} from '../model/AssessmentCompactDtoIEnumerableApiResponse';
import {AssessmentCreateDto} from '../model/AssessmentCreateDto';
import {AssessmentDtoApiResponse} from '../model/AssessmentDtoApiResponse';
import {AssessmentDtoIEnumerableApiResponse} from '../model/AssessmentDtoIEnumerableApiResponse';
import {AssessmentEditDto} from '../model/AssessmentEditDto';
import {AssessmentSearchDtoIEnumerableApiResponse} from '../model/AssessmentSearchDtoIEnumerableApiResponse';
import {SkillLevel} from '../model/SkillLevel';

/**
* Assessment service.
* @module api/AssessmentApi
* @version v3.76(UAT)
*/
export class AssessmentApi {

    /**
    * Constructs a new AssessmentApi. 
    * @alias module:api/AssessmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiAssessmentGet operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentCompactDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AssessmentApi~apiAssessmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentCompactDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentGetAllAssessmentJdIdGet operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentGetAllAssessmentJdIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentSearchDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} jdId 
     * @param {module:api/AssessmentApi~apiAssessmentGetAllAssessmentJdIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentGetAllAssessmentJdIdGet(jdId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jdId' is set
      if (jdId === undefined || jdId === null) {
        throw new Error("Missing the required parameter 'jdId' when calling apiAssessmentGetAllAssessmentJdIdGet");
      }

      let pathParams = {
        'jdId': jdId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentSearchDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment/GetAllAssessment/{jdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentGetAllByNameGet operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentGetAllByNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentCompactDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {module:api/AssessmentApi~apiAssessmentGetAllByNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentGetAllByNameGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentCompactDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment/GetAllByName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentGetAssementsBySkillIdSkillPlatformIdGet operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentGetAssementsBySkillIdSkillPlatformIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} skillPlatformId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SkillLevel} opts.level   1 &#x3D; Beginner  2 &#x3D; Intermediate  3 &#x3D; Expert
     * @param {module:api/AssessmentApi~apiAssessmentGetAssementsBySkillIdSkillPlatformIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentGetAssementsBySkillIdSkillPlatformIdGet(skillPlatformId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'skillPlatformId' is set
      if (skillPlatformId === undefined || skillPlatformId === null) {
        throw new Error("Missing the required parameter 'skillPlatformId' when calling apiAssessmentGetAssementsBySkillIdSkillPlatformIdGet");
      }

      let pathParams = {
        'skillPlatformId': skillPlatformId
      };
      let queryParams = {
        'level': opts['level']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment/GetAssementsBySkillId/{skillPlatformId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentGetSelfAssessmentGet operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentGetSelfAssessmentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isSelfAssessment 
     * @param {String} opts.title 
     * @param {module:api/AssessmentApi~apiAssessmentGetSelfAssessmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentGetSelfAssessmentGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'isSelfAssessment': opts['isSelfAssessment'],'title': opts['title']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment/GetSelfAssessment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentIdDelete operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentCompactDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AssessmentApi~apiAssessmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAssessmentIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentCompactDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentIdGet operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/AssessmentApi~apiAssessmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAssessmentIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentPost operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AssessmentCreateDto} opts.body 
     * @param {module:api/AssessmentApi~apiAssessmentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentPut operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AssessmentEditDto} opts.body 
     * @param {module:api/AssessmentApi~apiAssessmentPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiAssessmentUpdateAssessmentStatusPost operation.
     * @callback moduleapi/AssessmentApi~apiAssessmentUpdateAssessmentStatusPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isActive 
     * @param {Number} opts.assessmentId 
     * @param {module:api/AssessmentApi~apiAssessmentUpdateAssessmentStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiAssessmentUpdateAssessmentStatusPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'isActive': opts['isActive'],'assessmentId': opts['assessmentId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = AssessmentDtoApiResponse;

      return this.apiClient.callApi(
        '/api/Assessment/UpdateAssessmentStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}