/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CandidateQualificationCompactDtoApiResponse} from '../model/CandidateQualificationCompactDtoApiResponse';
import {CandidateQualificationCreateDto} from '../model/CandidateQualificationCreateDto';
import {CandidateQualificationDtoApiResponse} from '../model/CandidateQualificationDtoApiResponse';
import {CandidateQualificationDtoIEnumerableApiResponse} from '../model/CandidateQualificationDtoIEnumerableApiResponse';
import {CandidateQualificationEditDto} from '../model/CandidateQualificationEditDto';

/**
* CandidateQualification service.
* @module api/CandidateQualificationApi
* @version v3.76(UAT)
*/
export class CandidateQualificationApi {

    /**
    * Constructs a new CandidateQualificationApi. 
    * @alias module:api/CandidateQualificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiCandidateQualificationGetAllQualificationByCandidateIdcandidateIdGet operation.
     * @callback moduleapi/CandidateQualificationApi~apiCandidateQualificationGetAllQualificationByCandidateIdcandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateQualificationDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateQualificationApi~apiCandidateQualificationGetAllQualificationByCandidateIdcandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateQualificationGetAllQualificationByCandidateIdcandidateIdGet(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateQualificationGetAllQualificationByCandidateIdcandidateIdGet");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateQualificationDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateQualification/GetAllQualificationByCandidateId{candidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateQualificationIdDelete operation.
     * @callback moduleapi/CandidateQualificationApi~apiCandidateQualificationIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateQualificationCompactDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CandidateQualificationApi~apiCandidateQualificationIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateQualificationIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCandidateQualificationIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateQualificationCompactDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateQualification/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateQualificationIdGet operation.
     * @callback moduleapi/CandidateQualificationApi~apiCandidateQualificationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateQualificationDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CandidateQualificationApi~apiCandidateQualificationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateQualificationIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCandidateQualificationIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateQualificationDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateQualification/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateQualificationPost operation.
     * @callback moduleapi/CandidateQualificationApi~apiCandidateQualificationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateQualificationDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CandidateQualificationCreateDto} opts.body 
     * @param {module:api/CandidateQualificationApi~apiCandidateQualificationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateQualificationPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateQualificationDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateQualification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateQualificationUpdateQualificationDetailsPut operation.
     * @callback moduleapi/CandidateQualificationApi~apiCandidateQualificationUpdateQualificationDetailsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateQualificationDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CandidateQualificationEditDto} opts.body 
     * @param {module:api/CandidateQualificationApi~apiCandidateQualificationUpdateQualificationDetailsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateQualificationUpdateQualificationDetailsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateQualificationDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateQualification/UpdateQualificationDetails', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}