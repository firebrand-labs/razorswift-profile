/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CandidateEmployerProjectDtoIEnumerableApiResponse} from '../model/CandidateEmployerProjectDtoIEnumerableApiResponse';
import {CandidateProjectsCompactDtoApiResponse} from '../model/CandidateProjectsCompactDtoApiResponse';
import {CandidateProjectsCreateDto} from '../model/CandidateProjectsCreateDto';
import {CandidateProjectsDtoApiResponse} from '../model/CandidateProjectsDtoApiResponse';
import {CandidateProjectsDtoIEnumerableApiResponse} from '../model/CandidateProjectsDtoIEnumerableApiResponse';
import {CandidateProjectsEditDto} from '../model/CandidateProjectsEditDto';

/**
* CandidateProjects service.
* @module api/CandidateProjectsApi
* @version v3.76(UAT)
*/
export class CandidateProjectsApi {

    /**
    * Constructs a new CandidateProjectsApi. 
    * @alias module:api/CandidateProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiCandidateProjectsGetAllAcademicProjectsGet operation.
     * @callback moduleapi/CandidateProjectsApi~apiCandidateProjectsGetAllAcademicProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProjectsDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.candidateId 
     * @param {module:api/CandidateProjectsApi~apiCandidateProjectsGetAllAcademicProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateProjectsGetAllAcademicProjectsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'candidateId': opts['candidateId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProjectsDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateProjects/GetAllAcademicProjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateProjectsGetAllByEmployerIdGet operation.
     * @callback moduleapi/CandidateProjectsApi~apiCandidateProjectsGetAllByEmployerIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProjectsDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.employerId 
     * @param {module:api/CandidateProjectsApi~apiCandidateProjectsGetAllByEmployerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateProjectsGetAllByEmployerIdGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'employerId': opts['employerId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProjectsDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateProjects/GetAllByEmployerId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateProjectsGetAllCompanyProjectsGet operation.
     * @callback moduleapi/CandidateProjectsApi~apiCandidateProjectsGetAllCompanyProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateEmployerProjectDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.candidateId 
     * @param {module:api/CandidateProjectsApi~apiCandidateProjectsGetAllCompanyProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateProjectsGetAllCompanyProjectsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'candidateId': opts['candidateId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateEmployerProjectDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateProjects/GetAllCompanyProjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateProjectsGetAllProjectsToBeReviewedGet operation.
     * @callback moduleapi/CandidateProjectsApi~apiCandidateProjectsGetAllProjectsToBeReviewedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProjectsDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.candidateId 
     * @param {module:api/CandidateProjectsApi~apiCandidateProjectsGetAllProjectsToBeReviewedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateProjectsGetAllProjectsToBeReviewedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'candidateId': opts['candidateId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProjectsDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateProjects/GetAllProjectsToBeReviewed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateProjectsIdDelete operation.
     * @callback moduleapi/CandidateProjectsApi~apiCandidateProjectsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProjectsCompactDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CandidateProjectsApi~apiCandidateProjectsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateProjectsIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCandidateProjectsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProjectsCompactDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateProjects/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateProjectsIdGet operation.
     * @callback moduleapi/CandidateProjectsApi~apiCandidateProjectsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProjectsDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CandidateProjectsApi~apiCandidateProjectsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateProjectsIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCandidateProjectsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProjectsDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateProjects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateProjectsPost operation.
     * @callback moduleapi/CandidateProjectsApi~apiCandidateProjectsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProjectsDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CandidateProjectsCreateDto} opts.body 
     * @param {module:api/CandidateProjectsApi~apiCandidateProjectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateProjectsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProjectsDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateProjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateProjectsUpdateProjectDetailsPut operation.
     * @callback moduleapi/CandidateProjectsApi~apiCandidateProjectsUpdateProjectDetailsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProjectsDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CandidateProjectsEditDto} opts.body 
     * @param {module:api/CandidateProjectsApi~apiCandidateProjectsUpdateProjectDetailsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateProjectsUpdateProjectDetailsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProjectsDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateProjects/UpdateProjectDetails', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}