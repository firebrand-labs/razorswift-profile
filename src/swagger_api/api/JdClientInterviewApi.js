/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {JdClientInterviewCompactDtoApiResponse} from '../model/JdClientInterviewCompactDtoApiResponse';
import {JdClientInterviewCompactDtoIEnumerableApiResponse} from '../model/JdClientInterviewCompactDtoIEnumerableApiResponse';
import {JdClientInterviewCreateDto} from '../model/JdClientInterviewCreateDto';
import {JdClientInterviewDtoApiResponse} from '../model/JdClientInterviewDtoApiResponse';

/**
* JdClientInterview service.
* @module api/JdClientInterviewApi
* @version v3.76(UAT)
*/
export class JdClientInterviewApi {

    /**
    * Constructs a new JdClientInterviewApi. 
    * @alias module:api/JdClientInterviewApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiJdClientInterviewGetAllInterviewsByClientIdClientIdGet operation.
     * @callback moduleapi/JdClientInterviewApi~apiJdClientInterviewGetAllInterviewsByClientIdClientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewCompactDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} clientId 
     * @param {module:api/JdClientInterviewApi~apiJdClientInterviewGetAllInterviewsByClientIdClientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewGetAllInterviewsByClientIdClientIdGet(clientId, callback) {
      
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling apiJdClientInterviewGetAllInterviewsByClientIdClientIdGet");
      }

      let pathParams = {
        'clientId': clientId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewCompactDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterview/GetAllInterviewsByClientId/{clientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewGetByGuidGuidGet operation.
     * @callback moduleapi/JdClientInterviewApi~apiJdClientInterviewGetByGuidGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} guid 
     * @param {module:api/JdClientInterviewApi~apiJdClientInterviewGetByGuidGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewGetByGuidGuidGet(guid, callback) {
      
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling apiJdClientInterviewGetByGuidGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterview/GetByGuid/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewGetJdClientInterviewByIdJobDescriptionIdCandidateIdGet operation.
     * @callback moduleapi/JdClientInterviewApi~apiJdClientInterviewGetJdClientInterviewByIdJobDescriptionIdCandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewCompactDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} jobDescriptionId 
     * @param {Number} candidateId 
     * @param {module:api/JdClientInterviewApi~apiJdClientInterviewGetJdClientInterviewByIdJobDescriptionIdCandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewGetJdClientInterviewByIdJobDescriptionIdCandidateIdGet(jobDescriptionId, candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobDescriptionId' is set
      if (jobDescriptionId === undefined || jobDescriptionId === null) {
        throw new Error("Missing the required parameter 'jobDescriptionId' when calling apiJdClientInterviewGetJdClientInterviewByIdJobDescriptionIdCandidateIdGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiJdClientInterviewGetJdClientInterviewByIdJobDescriptionIdCandidateIdGet");
      }

      let pathParams = {
        'jobDescriptionId': jobDescriptionId,'CandidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewCompactDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterview/GetJdClientInterviewById/{jobDescriptionId}/{CandidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewGetUpdatedInterviewDetailsByIdJobDescriptionIdCandidateIdGet operation.
     * @callback moduleapi/JdClientInterviewApi~apiJdClientInterviewGetUpdatedInterviewDetailsByIdJobDescriptionIdCandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewCompactDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} jobDescriptionId 
     * @param {Number} candidateId 
     * @param {module:api/JdClientInterviewApi~apiJdClientInterviewGetUpdatedInterviewDetailsByIdJobDescriptionIdCandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewGetUpdatedInterviewDetailsByIdJobDescriptionIdCandidateIdGet(jobDescriptionId, candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobDescriptionId' is set
      if (jobDescriptionId === undefined || jobDescriptionId === null) {
        throw new Error("Missing the required parameter 'jobDescriptionId' when calling apiJdClientInterviewGetUpdatedInterviewDetailsByIdJobDescriptionIdCandidateIdGet");
      }
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiJdClientInterviewGetUpdatedInterviewDetailsByIdJobDescriptionIdCandidateIdGet");
      }

      let pathParams = {
        'jobDescriptionId': jobDescriptionId,'CandidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewCompactDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterview/GetUpdatedInterviewDetailsById/{jobDescriptionId}/{CandidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewIdGet operation.
     * @callback moduleapi/JdClientInterviewApi~apiJdClientInterviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/JdClientInterviewApi~apiJdClientInterviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJdClientInterviewIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterview/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewPost operation.
     * @callback moduleapi/JdClientInterviewApi~apiJdClientInterviewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/JdClientInterviewCreateDto} opts.body 
     * @param {module:api/JdClientInterviewApi~apiJdClientInterviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewUpdateInterviewClearedStatusIdCandidateStatusIdPost operation.
     * @callback moduleapi/JdClientInterviewApi~apiJdClientInterviewUpdateInterviewClearedStatusIdCandidateStatusIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Number} candidateStatusId 
     * @param {module:api/JdClientInterviewApi~apiJdClientInterviewUpdateInterviewClearedStatusIdCandidateStatusIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewUpdateInterviewClearedStatusIdCandidateStatusIdPost(id, candidateStatusId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJdClientInterviewUpdateInterviewClearedStatusIdCandidateStatusIdPost");
      }
      // verify the required parameter 'candidateStatusId' is set
      if (candidateStatusId === undefined || candidateStatusId === null) {
        throw new Error("Missing the required parameter 'candidateStatusId' when calling apiJdClientInterviewUpdateInterviewClearedStatusIdCandidateStatusIdPost");
      }

      let pathParams = {
        'id': id,'candidateStatusId': candidateStatusId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterview/UpdateInterviewClearedStatus/{id}/{candidateStatusId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdClientInterviewUpdateInterviewRejectedStatusIdCandidateStatusIdPost operation.
     * @callback moduleapi/JdClientInterviewApi~apiJdClientInterviewUpdateInterviewRejectedStatusIdCandidateStatusIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdClientInterviewDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Number} candidateStatusId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.remarks 
     * @param {module:api/JdClientInterviewApi~apiJdClientInterviewUpdateInterviewRejectedStatusIdCandidateStatusIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdClientInterviewUpdateInterviewRejectedStatusIdCandidateStatusIdPost(id, candidateStatusId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJdClientInterviewUpdateInterviewRejectedStatusIdCandidateStatusIdPost");
      }
      // verify the required parameter 'candidateStatusId' is set
      if (candidateStatusId === undefined || candidateStatusId === null) {
        throw new Error("Missing the required parameter 'candidateStatusId' when calling apiJdClientInterviewUpdateInterviewRejectedStatusIdCandidateStatusIdPost");
      }

      let pathParams = {
        'id': id,'candidateStatusId': candidateStatusId
      };
      let queryParams = {
        'remarks': opts['remarks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdClientInterviewDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdClientInterview/UpdateInterviewRejectedStatus/{id}/{candidateStatusId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}