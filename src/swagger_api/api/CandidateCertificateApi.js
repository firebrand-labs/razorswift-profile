/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CandidateCertificateCompactDtoApiResponse} from '../model/CandidateCertificateCompactDtoApiResponse';
import {CandidateCertificateCreateDto} from '../model/CandidateCertificateCreateDto';
import {CandidateCertificateDtoApiResponse} from '../model/CandidateCertificateDtoApiResponse';
import {CandidateCertificateDtoIEnumerableApiResponse} from '../model/CandidateCertificateDtoIEnumerableApiResponse';
import {CandidateCertificateEditDto} from '../model/CandidateCertificateEditDto';
import {CandidateCertificateFilterDtoIEnumerableApiResponse} from '../model/CandidateCertificateFilterDtoIEnumerableApiResponse';
import {StringIEnumerableApiResponse} from '../model/StringIEnumerableApiResponse';

/**
* CandidateCertificate service.
* @module api/CandidateCertificateApi
* @version v3.76(UAT)
*/
export class CandidateCertificateApi {

    /**
    * Constructs a new CandidateCertificateApi. 
    * @alias module:api/CandidateCertificateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiCandidateCertificateGetAllByAuthorityNameGet operation.
     * @callback moduleapi/CandidateCertificateApi~apiCandidateCertificateGetAllByAuthorityNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.authoritynName 
     * @param {module:api/CandidateCertificateApi~apiCandidateCertificateGetAllByAuthorityNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateCertificateGetAllByAuthorityNameGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'authoritynName': opts['authoritynName']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = StringIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateCertificate/GetAllByAuthorityName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateCertificateGetAllByNameGet operation.
     * @callback moduleapi/CandidateCertificateApi~apiCandidateCertificateGetAllByNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCertificateFilterDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.title 
     * @param {module:api/CandidateCertificateApi~apiCandidateCertificateGetAllByNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateCertificateGetAllByNameGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'title': opts['title']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCertificateFilterDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateCertificate/GetAllByName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateCertificateGetAllCertificatesBycandidateIdGet operation.
     * @callback moduleapi/CandidateCertificateApi~apiCandidateCertificateGetAllCertificatesBycandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCertificateDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateCertificateApi~apiCandidateCertificateGetAllCertificatesBycandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateCertificateGetAllCertificatesBycandidateIdGet(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateCertificateGetAllCertificatesBycandidateIdGet");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCertificateDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateCertificate/GetAllCertificatesBy{candidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateCertificateIdDelete operation.
     * @callback moduleapi/CandidateCertificateApi~apiCandidateCertificateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCertificateCompactDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CandidateCertificateApi~apiCandidateCertificateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateCertificateIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCandidateCertificateIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCertificateCompactDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateCertificate/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateCertificateIdGet operation.
     * @callback moduleapi/CandidateCertificateApi~apiCandidateCertificateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCertificateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/CandidateCertificateApi~apiCandidateCertificateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateCertificateIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCandidateCertificateIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCertificateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateCertificate/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateCertificatePost operation.
     * @callback moduleapi/CandidateCertificateApi~apiCandidateCertificatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCertificateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CandidateCertificateCreateDto} opts.body 
     * @param {module:api/CandidateCertificateApi~apiCandidateCertificatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateCertificatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCertificateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateCertificatePut operation.
     * @callback moduleapi/CandidateCertificateApi~apiCandidateCertificatePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCertificateDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CandidateCertificateEditDto} opts.body 
     * @param {module:api/CandidateCertificateApi~apiCandidateCertificatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateCertificatePut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCertificateDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateCertificate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}