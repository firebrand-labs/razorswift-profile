/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CandidateBackGroundImageDtoApiResponse} from '../model/CandidateBackGroundImageDtoApiResponse';
import {CandidateCollegeImageDtoApiResponse} from '../model/CandidateCollegeImageDtoApiResponse';
import {CandidateProfileImageDtoApiResponse} from '../model/CandidateProfileImageDtoApiResponse';
import {CandidateResumeDtoApiResponse} from '../model/CandidateResumeDtoApiResponse';

/**
* CandidateDocument service.
* @module api/CandidateDocumentApi
* @version v3.76(UAT)
*/
export class CandidateDocumentApi {

    /**
    * Constructs a new CandidateDocumentApi. 
    * @alias module:api/CandidateDocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiCandidateDocumentDeleteBackGroundImageCandidateIdDelete operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentDeleteBackGroundImageCandidateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateBackGroundImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentDeleteBackGroundImageCandidateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentDeleteBackGroundImageCandidateIdDelete(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentDeleteBackGroundImageCandidateIdDelete");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateBackGroundImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/DeleteBackGroundImage/{candidateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentDeleteCollegeImageCandidateIdDelete operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentDeleteCollegeImageCandidateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCollegeImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentDeleteCollegeImageCandidateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentDeleteCollegeImageCandidateIdDelete(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentDeleteCollegeImageCandidateIdDelete");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCollegeImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/DeleteCollegeImage/{candidateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentDeleteProfileImageCandidateIdDelete operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentDeleteProfileImageCandidateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProfileImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentDeleteProfileImageCandidateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentDeleteProfileImageCandidateIdDelete(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentDeleteProfileImageCandidateIdDelete");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProfileImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/DeleteProfileImage/{candidateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentDeleteResumeCandidateIdDelete operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentDeleteResumeCandidateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateResumeDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentDeleteResumeCandidateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentDeleteResumeCandidateIdDelete(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentDeleteResumeCandidateIdDelete");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateResumeDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/DeleteResume/{candidateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentGetBackGroundImageByIdCandidateIdGet operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentGetBackGroundImageByIdCandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateBackGroundImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentGetBackGroundImageByIdCandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentGetBackGroundImageByIdCandidateIdGet(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentGetBackGroundImageByIdCandidateIdGet");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateBackGroundImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/GetBackGroundImageById/{candidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentGetCollegeImageByIdCandidateIdGet operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentGetCollegeImageByIdCandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCollegeImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentGetCollegeImageByIdCandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentGetCollegeImageByIdCandidateIdGet(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentGetCollegeImageByIdCandidateIdGet");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCollegeImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/GetCollegeImageById/{candidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentGetProfileImageByIdCandidateIdGet operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentGetProfileImageByIdCandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProfileImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentGetProfileImageByIdCandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentGetProfileImageByIdCandidateIdGet(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentGetProfileImageByIdCandidateIdGet");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProfileImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/GetProfileImageById/{candidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentGetResumeByIdCandidateIdGet operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentGetResumeByIdCandidateIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateResumeDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentGetResumeByIdCandidateIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentGetResumeByIdCandidateIdGet(candidateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentGetResumeByIdCandidateIdGet");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateResumeDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/GetResumeById/{candidateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentUploadBackGroundImageCandidateIdPost operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentUploadBackGroundImageCandidateIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateBackGroundImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.uploadedFile 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentUploadBackGroundImageCandidateIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentUploadBackGroundImageCandidateIdPost(candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentUploadBackGroundImageCandidateIdPost");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'uploadedFile': opts['uploadedFile']
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateBackGroundImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/UploadBackGroundImage/{candidateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentUploadCollegeImageCandidateIdPost operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentUploadCollegeImageCandidateIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateCollegeImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.uploadedFile 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentUploadCollegeImageCandidateIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentUploadCollegeImageCandidateIdPost(candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentUploadCollegeImageCandidateIdPost");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'uploadedFile': opts['uploadedFile']
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateCollegeImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/UploadCollegeImage/{candidateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentUploadProfileImageCandidateIdPost operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentUploadProfileImageCandidateIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateProfileImageDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.uploadedFile 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentUploadProfileImageCandidateIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentUploadProfileImageCandidateIdPost(candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentUploadProfileImageCandidateIdPost");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'uploadedFile': opts['uploadedFile']
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateProfileImageDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/UploadProfileImage/{candidateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiCandidateDocumentUploadResumeCandidateIdPost operation.
     * @callback moduleapi/CandidateDocumentApi~apiCandidateDocumentUploadResumeCandidateIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandidateResumeDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} candidateId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.resumeFile 
     * @param {module:api/CandidateDocumentApi~apiCandidateDocumentUploadResumeCandidateIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiCandidateDocumentUploadResumeCandidateIdPost(candidateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'candidateId' is set
      if (candidateId === undefined || candidateId === null) {
        throw new Error("Missing the required parameter 'candidateId' when calling apiCandidateDocumentUploadResumeCandidateIdPost");
      }

      let pathParams = {
        'candidateId': candidateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'resumeFile': opts['resumeFile']
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CandidateResumeDtoApiResponse;

      return this.apiClient.callApi(
        '/api/CandidateDocument/UploadResume/{candidateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}