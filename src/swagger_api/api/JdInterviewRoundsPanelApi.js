/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {JdInterviewRoundsPanelCompactDtoApiResponse} from '../model/JdInterviewRoundsPanelCompactDtoApiResponse';
import {JdInterviewRoundsPanelCreateDto} from '../model/JdInterviewRoundsPanelCreateDto';
import {JdInterviewRoundsPanelDtoApiResponse} from '../model/JdInterviewRoundsPanelDtoApiResponse';
import {JdInterviewRoundsPanelDtoIEnumerableApiResponse} from '../model/JdInterviewRoundsPanelDtoIEnumerableApiResponse';
import {JdInterviewRoundsPanelEditDto} from '../model/JdInterviewRoundsPanelEditDto';

/**
* JdInterviewRoundsPanel service.
* @module api/JdInterviewRoundsPanelApi
* @version v3.76(UAT)
*/
export class JdInterviewRoundsPanelApi {

    /**
    * Constructs a new JdInterviewRoundsPanelApi. 
    * @alias module:api/JdInterviewRoundsPanelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiJdInterviewRoundsPanelGetRoundPanelByRoundIdRoundIdGet operation.
     * @callback moduleapi/JdInterviewRoundsPanelApi~apiJdInterviewRoundsPanelGetRoundPanelByRoundIdRoundIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsPanelDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} roundId 
     * @param {module:api/JdInterviewRoundsPanelApi~apiJdInterviewRoundsPanelGetRoundPanelByRoundIdRoundIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundsPanelGetRoundPanelByRoundIdRoundIdGet(roundId, callback) {
      
      let postBody = null;
      // verify the required parameter 'roundId' is set
      if (roundId === undefined || roundId === null) {
        throw new Error("Missing the required parameter 'roundId' when calling apiJdInterviewRoundsPanelGetRoundPanelByRoundIdRoundIdGet");
      }

      let pathParams = {
        'roundId': roundId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsPanelDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRoundsPanel/GetRoundPanelByRoundId/{roundId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdInterviewRoundsPanelIdDelete operation.
     * @callback moduleapi/JdInterviewRoundsPanelApi~apiJdInterviewRoundsPanelIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsPanelCompactDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/JdInterviewRoundsPanelApi~apiJdInterviewRoundsPanelIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundsPanelIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJdInterviewRoundsPanelIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsPanelCompactDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRoundsPanel/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdInterviewRoundsPanelInterviewRoundIdPost operation.
     * @callback moduleapi/JdInterviewRoundsPanelApi~apiJdInterviewRoundsPanelInterviewRoundIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsPanelDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} interviewRoundId 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/JdInterviewRoundsPanelCreateDto>} opts.body 
     * @param {module:api/JdInterviewRoundsPanelApi~apiJdInterviewRoundsPanelInterviewRoundIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundsPanelInterviewRoundIdPost(interviewRoundId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'interviewRoundId' is set
      if (interviewRoundId === undefined || interviewRoundId === null) {
        throw new Error("Missing the required parameter 'interviewRoundId' when calling apiJdInterviewRoundsPanelInterviewRoundIdPost");
      }

      let pathParams = {
        'InterviewRoundId': interviewRoundId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsPanelDtoApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRoundsPanel/{InterviewRoundId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiJdInterviewRoundsPanelPut operation.
     * @callback moduleapi/JdInterviewRoundsPanelApi~apiJdInterviewRoundsPanelPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JdInterviewRoundsPanelDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/JdInterviewRoundsPanelEditDto>} opts.body 
     * @param {Number} opts.interviewRoundId 
     * @param {module:api/JdInterviewRoundsPanelApi~apiJdInterviewRoundsPanelPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiJdInterviewRoundsPanelPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        'InterviewRoundId': opts['interviewRoundId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = JdInterviewRoundsPanelDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/JdInterviewRoundsPanel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}