/*
 * Extractor Engine API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.76(UAT)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ClientContractCompactDtoApiResponse} from '../model/ClientContractCompactDtoApiResponse';
import {ClientContractCompactDtoIEnumerableApiResponse} from '../model/ClientContractCompactDtoIEnumerableApiResponse';
import {ClientContractDtoApiResponse} from '../model/ClientContractDtoApiResponse';
import {ClientContractDtoIEnumerableApiResponse} from '../model/ClientContractDtoIEnumerableApiResponse';

/**
* ClientContract service.
* @module api/ClientContractApi
* @version v3.76(UAT)
*/
export class ClientContractApi {

    /**
    * Constructs a new ClientContractApi. 
    * @alias module:api/ClientContractApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiClientContractDeleteContractDocumentContractIdDelete operation.
     * @callback moduleapi/ClientContractApi~apiClientContractDeleteContractDocumentContractIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientContractDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} contractId 
     * @param {module:api/ClientContractApi~apiClientContractDeleteContractDocumentContractIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientContractDeleteContractDocumentContractIdDelete(contractId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contractId' is set
      if (contractId === undefined || contractId === null) {
        throw new Error("Missing the required parameter 'contractId' when calling apiClientContractDeleteContractDocumentContractIdDelete");
      }

      let pathParams = {
        'contractId': contractId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientContractDtoApiResponse;

      return this.apiClient.callApi(
        '/api/ClientContract/DeleteContractDocument/{contractId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientContractGet operation.
     * @callback moduleapi/ClientContractApi~apiClientContractGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientContractCompactDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ClientContractApi~apiClientContractGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientContractGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientContractCompactDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/ClientContract', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientContractGetContractByClientIdClientidGet operation.
     * @callback moduleapi/ClientContractApi~apiClientContractGetContractByClientIdClientidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientContractDtoIEnumerableApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} clientid 
     * @param {module:api/ClientContractApi~apiClientContractGetContractByClientIdClientidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientContractGetContractByClientIdClientidGet(clientid, callback) {
      
      let postBody = null;
      // verify the required parameter 'clientid' is set
      if (clientid === undefined || clientid === null) {
        throw new Error("Missing the required parameter 'clientid' when calling apiClientContractGetContractByClientIdClientidGet");
      }

      let pathParams = {
        'Clientid': clientid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientContractDtoIEnumerableApiResponse;

      return this.apiClient.callApi(
        '/api/ClientContract/GetContractByClientId{Clientid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientContractIdDelete operation.
     * @callback moduleapi/ClientContractApi~apiClientContractIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientContractCompactDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/ClientContractApi~apiClientContractIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientContractIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiClientContractIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientContractCompactDtoApiResponse;

      return this.apiClient.callApi(
        '/api/ClientContract/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientContractIdGet operation.
     * @callback moduleapi/ClientContractApi~apiClientContractIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientContractDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/ClientContractApi~apiClientContractIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientContractIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiClientContractIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientContractDtoApiResponse;

      return this.apiClient.callApi(
        '/api/ClientContract/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientContractPost operation.
     * @callback moduleapi/ClientContractApi~apiClientContractPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientContractDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.approvedBy 
     * @param {Number} opts.approvedByUserId 
     * @param {String} opts.createdBy 
     * @param {Number} opts.createdByUserId 
     * @param {Date} opts.dateOfInvoice 
     * @param {Blob} opts.uploadedFile 
     * @param {Number} opts.clientId 
     * @param {Date} opts.createdDate 
     * @param {module:api/ClientContractApi~apiClientContractPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientContractPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'StartDate': opts['startDate'],'EndDate': opts['endDate'],'ApprovedBy': opts['approvedBy'],'ApprovedByUserId': opts['approvedByUserId'],'CreatedBy': opts['createdBy'],'CreatedByUserId': opts['createdByUserId'],'DateOfInvoice': opts['dateOfInvoice'],'uploadedFile': opts['uploadedFile'],'ClientId': opts['clientId'],'CreatedDate': opts['createdDate']
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientContractDtoApiResponse;

      return this.apiClient.callApi(
        '/api/ClientContract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiClientContractPut operation.
     * @callback moduleapi/ClientContractApi~apiClientContractPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientContractDtoApiResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.approvedBy 
     * @param {Number} opts.approvedByUserId 
     * @param {String} opts.createdBy 
     * @param {Number} opts.createdByUserId 
     * @param {Date} opts.dateOfInvoice 
     * @param {Blob} opts.uploadedFile 
     * @param {Number} opts.clientId 
     * @param {Date} opts.createdDate 
     * @param {Number} opts.id 
     * @param {module:api/ClientContractApi~apiClientContractPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiClientContractPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'StartDate': opts['startDate'],'EndDate': opts['endDate'],'ApprovedBy': opts['approvedBy'],'ApprovedByUserId': opts['approvedByUserId'],'CreatedBy': opts['createdBy'],'CreatedByUserId': opts['createdByUserId'],'DateOfInvoice': opts['dateOfInvoice'],'uploadedFile': opts['uploadedFile'],'ClientId': opts['clientId'],'CreatedDate': opts['createdDate'],'Id': opts['id']
      };

      let authNames = ['Bearer', 'X-RS-Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ClientContractDtoApiResponse;

      return this.apiClient.callApi(
        '/api/ClientContract', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}